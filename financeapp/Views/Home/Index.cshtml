@using financeapp.Models;
@model List<Finance>;
  @{
  ViewData["Title"] = "Home Page";
  }

  <div class="text-center">
    <h1 class="display-4">Welcome @User.Identity.Name</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
  </div>

  <section class="grid py-20 lg:grid-cols-3">
    <div class="col-span-2">
    </div>
    <div class="bg-stone-800 outline outline-2 outline-stone-700 rounded-xl overflow-clip">
      <div id="finances">
      </div>
      <button id="add_expense_btn" class="w-full bg-primary py-2 px-4">Add a new expense</button>
      <button id="add_income_btn" class="w-full py-2 px-4">Add a new income</button>
    </div>
  </section>

  @await Html.PartialAsync("_AddExpense", new financeapp.Models.ViewModels.NewExpenseViewModel())

  @section Functions {
  <script>
    async function fetchExpenses() {
      const financesElement = document.querySelector('div#finances');
      const url = '/finances';
      let data;
      try {
        const response = await fetch(url, {
          method: 'POST',
        });
        // because the endpoint is returning HTML
        // we need to use the text() method to get the data
        data = await response.text();
      } catch (error) {
        console.error(error);
      }
      financesElement.innerHTML = data;
    }
  </script>
  }

  @section Scripts {
  <script defer>
    fetchExpenses();
    const addButtons = document.querySelectorAll('#add_expense_btn, #add_income_btn');
    function toggleForm(button) {
      const form = document.querySelector('form#add_expense');
      form.classList.toggle('hidden');
      form.classList.toggle('flex');
      // toggle between expense and income, so we dont need to add a new form
      if (button.id === 'add_income_btn') {
        form.querySelector('input[type=checkbox]').checked = false;
      } else {
        form.querySelector('input[type=checkbox]').checked = true;
      }
      document.addEventListener('click', (e) => {
        if (e.target === button) return;
        if (e.target !== form && !form.contains(e.target)) {
          form.classList.add('hidden');
          form.classList.remove('flex');
        }
      });
    }
    addButtons.forEach((button) => {
      button.addEventListener('click', () => {
        toggleForm(button);
      });
    });
  </script>
  }
