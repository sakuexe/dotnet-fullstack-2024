@{
ViewData["Title"] = "Home Page";
}

@section Scripts {
<script src="~/js/stonks.js" type="module" defer></script>
}

<div class="grid gap-4 lg:grid-cols-4">
  <section class="col-span-full">
    <div id="my_stonks"></div>
  </section>

  <partial name="_Stonks"></partial>

  <section id="business_container"></section>
</div>

<script>
  async function getBusinesses() {
    const businessContainer = document.querySelector("#business_container");
    const url = "/stonks/_businesses";
    const response = await fetch(url);
    if (!response.ok) {
      businessContainer.innerText = "Failed to fetch data";
    }
    // the response contains html content
    businessContainer.innerHTML = await response.text();
  }

  async function getMyStonks() {
    const myStonks = document.getElementById('my_stonks');
    const url = '/holdings/';
    try {
      const response = await fetch(url, {
        method: 'POST',
        credentials: 'include',
      });
      if (!response.ok) {
        console.error('Failed to fetch data');
        return;
      }
      myStonks.innerHTML = await response.text();
    } catch (error) {
      console.error('Failed to fetch data', error);
      return;
    }
  }

  async function fetchData() {
    // we have to wait for getBusinesses to finish before calling getMyStonks
    // this is becaus getBusinesses also updates the stonk value at every fetch
    // so we need to make sure that the values are updated before we fetch the user's stonks
    await getBusinesses();
    getMyStonks();
  }
  
  fetchData();
</script>
